---
version: '3'

dotenv: ['task.env']

vars:
  BUILD_DATE:
    sh: "date -u +%Y-%m-%dT%H%M%S%Z"
  BUILD_ARGS: >
    --build-arg VERSION={{ .VERSION }}
    --build-arg CHECKSUM={{ .CHECKSUM }}
    --build-arg BUILD_DATE={{ .BUILD_DATE }}
  TAG_VERSION: "{{ .NS }}/{{ .IMAGE_NAME }}:{{ .VERSION }}-ls{{ .LS }}"
  TAG_LATEST: "{{ .NS }}/{{ .IMAGE_NAME }}:latest"
  CONTAINER: "{{ .CONTAINER_NAME }}-{{ .CONTAINER_INSTANCE }}"
  RUN: >
    "docker run -it --rm --name
      {{ .CONTAINER_NAME }}-{{ .CONTAINER_INSTANCE }}
      {{ .ENV }}
      {{ .PORTS }}"
  EXEC: "docker exec -it {{ .ENV }} {{ .PORTS }} {{ .CONTAINER }}"
  BUILD: "docker buildx build {{ .BUILD_ARGS }} -t"

includes:
  build: ./.taskfiles/build.yaml
  builder: ./.taskfiles/builder.yaml
  chk: ./.taskfiles/chk.yaml
  deps: ./.taskfiles/deps.yaml
  pkgs: ./.taskfiles/pkgs.yaml
  shell: ./.taskfiles/shell.yaml
  snyk: ./.taskfiles/snyk.yaml

tasks:
  build:
    desc: Build the native Docker image
    cmds:
      - "{{ .BUILD }} {{ .TAG_VERSION }} -f Dockerfile ."
    deps:
      - build:build-deps

  checksum:
    desc: Get the checksum of the release or source package.
    deps:
      - chk:_varcheck
      - chk:_release
      - chk:_source

  date-exec:
    desc: Get the date of the container
    cmds:
      - "{{ .EXEC }} date"

  date-run:
    desc: Get the date of the image
    cmds:
      - "{{ .RUN }} --entrypoint date {{ .TAG_VERSION }}"

  lint:
    desc: Lint the repoistory
    cmds:
      - "hadolint Dockerfile"
      - "yamllint ."

  load:
    desc: Load the release image
    cmds:
      - "{{ .BUILD }} {{ .TAG_VERSION }} -f Dockerfile . --load"

  load-latest:
    desc: Load the release image
    cmds:
      - "{{ .BUILD }} {{ .TAG_LATEST }} -f Dockerfile . --load"

  pre-commit:
    desc: Install pre-commit hooks
    cmds:
      - "pre-commit install"
      - "pre-commit install-hooks"
    preconditions:
      - sh: pre-commit --version
        msg: "pre-commit is not installed. Run `task deps:pre-commit`"

  prune:
    desc: Prune the builder
    cmds:
      - "docker builder prune --all -f"

  push:
    desc: Push the image to all repositories
    cmds:
      - "{{ .BUILD }} {{ .TAG_LATEST }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .TAG_VERSION }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .QUAY_LATEST }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .QUAY_VERSION }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .GHCR_LATEST }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .GHCR_VERSION }} {{ .PLATFORMS }} -f Dockerfile . --push"
    vars:
      QUAY_VERSION: "quay.io/{{ .TAG_VERSION }}"
      QUAY_LATEST: "quay.io/{{ .TAG_LATEST }}"
      GHCR_VERSION: "ghcr.io/{{ .TAG_VERSION }}"
      GHCR_LATEST: "ghcr.io/{{ .TAG_LATEST }}"

  readme:
    desc: Update the README.md by replacing template with the image name.
    cmds:
      - "sed -i 's/template/{{ .IMAGE_NAME }}/g' README.md"

  run:
    desc: Run the image
    cmds:
      - "{{ .RUN }} {{ .TAG_VERSION }}"

  run-latest:
    desc: Run the latest image
    cmds:
      - "{{ .RUN }} {{ .TAG_LATEST }}"

  shell:
    desc: Run a shell of an image
    cmds:
      - "{{ .RUN }} --entrypoint /bin/sh -u 0 {{ .TAG_VERSION }}"

  stop:
    desc: Stop a running container
    cmds:
      - "docker stop {{ .CONTAINER }}"

  up:
    desc: Run docker-compose up
    cmds:
      - docker-compose -f docker-compose.sqlite.yaml up

  vars:
    desc: Print all the variables
    cmds:
      - "printf 'task: Available variables for this project:\n'"
      - 'printf "* BASE               %s\n" "{{ .BASE }}"'
      - 'printf "* CHECKSUM           %s\n" "{{ .CHECKSUM }}"'
      - 'printf "* CONTAINER          %s\n" "{{ .CONTAINER }}"'
      - 'printf "* CONTAINER_INSTANCE %s\n" "{{ .CONTAINER_INSTANCE }}"'
      - 'printf "* CONTAINER_NAME     %s\n" "{{ .CONTAINER_NAME }}"'
      - 'printf "* ENV                %s\n" "{{ .ENV }}"'
      - 'printf "* FILENAME           %s\n" "{{ .FILENAME }}"'
      - 'printf "* IMAGE_NAME         %s\n" "{{ .IMAGE_NAME }}"'
      - 'printf "* LS                 %s\n" "{{ .LS }}"'
      - 'printf "* NS                 %s\n" "{{ .NS }}"'
      - 'printf "* PACKAGES           %s\n" "{{ .PACKAGES }}"'
      - 'printf "* PIP                %s\n" "{{ .PIP }}"'
      - 'printf "* PLATFORMS          %s\n" "{{ .PLATFORMS }}"'
      - 'printf "* PORTS              %s\n" "{{ .PORTS }}"'
      - 'printf "* SOURCE_ORG         %s\n" "{{ .SOURCE_ORG }}"'
      - 'printf "* SOURCE_REPO        %s\n" "{{ .SOURCE_REPO }}"'
      - 'printf "* TYPE               %s\n" "{{ .TYPE }}"'
      - 'printf "* VERSION            %s\n" "{{ .VERSION }}"'
    silent: true

  default:
    cmds:
      - task -l
    silent: true
