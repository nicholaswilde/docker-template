---
version: '3'

dotenv: ['task.env']

vars:
  BUILD_DATE:
    sh: "date -u +%Y-%m-%dT%H%M%S%Z"
  BUILD_ARGS: "--build-arg VERSION={{ .VERSION }} --build-arg CHECKSUM={{ .CHECKSUM }} --build-arg BUILD_DATE={{ .BUILD_DATE }}"
  TAG_VERSION: "{{ .NS }}/{{ .IMAGE_NAME }}:{{ .VERSION }}-ls{{ .LS }}"
  TAG_LATEST: "{{ .NS }}/{{ .IMAGE_NAME }}:latest"
  QUAY_VERSION: "quay.io/{{ .TAG_VERSION }}"
  QUAY_LATEST: "quay.io/{{ .TAG_LATEST }}"
  GHCR_VERSION: "ghcr.io/{{ .TAG_VERSION }}"
  GHCR_LATEST: "ghcr.io/{{ .TAG_LATEST }}"
  URL: "https://github.com/{{ .IMAGE_NAME }}/{{ .IMAGE_NAME }}/releases/download/v{{ .VERSION }}/Leantime-v{{ .VERSION }}.tar.gz"
  CONTAINER: "{{ .CONTAINER_NAME }}-{{ .CONTAINER_INSTANCE }}"
  RUN: "docker run -it --rm {{ .ENV }} {{ .PORTS }}"
  EXEC: "docker exec -it {{ .ENV }} {{ .PORTS }} {{ .CONTAINER }}"
  BUILD: "docker buildx build {{ .BUILD_ARGS }} -t"

includes:
  builder: ./.taskfiles/builder.yaml

tasks:

  print:
    desc: Build the image
    cmds:
      - echo "{{ .QUAY_VERSION }}"
      - echo "{{ .QUAY_LATEST }}"
      - echo "{{ .GHCR_VERSION }}"
      - echo "{{ .GHCR_LATEST }}"

  all:
    desc: Build all platforms
    cmds:
      - "{{ .BUILD }} {{ .TAG_VERSION }} {{ .PLATFORMS }} -f Dockerfile ."
    deps:
      - build-deps

  build:
    desc: Build the native Docker image
    cmds:
      - "{{ .BUILD }} {{ .TAG_VERSION }} -f Dockerfile ."
    deps:
      - build-deps

  build-latest:
    desc: Build the latest Docker image
    cmds:
      - "{{ .BUILD }} {{ .TAG_LATEST }} -f Dockerfile ."
    deps:
      - build-deps

  date-exec:
    desc: Get the date of the container
    cmds:
      - "{{ .EXEC }} date"

  date-run:
    desc: Get the date of the container
    cmds:
      - "{{ .RUN }} date"

  lint:
    desc: Lint the repoistory
    cmds:
      - "hadolint Dockerfile"
      - "yamllint ."

  load:
    desc: Load the release image
    cmds:
      - "{{ .BUILD }} {{ .TAG_VERSION }} -f Dockerfile . --load"

  load-latest:
    desc: Load the release image
    cmds:
      - "{{ .BUILD }} {{ .TAG_LATEST }} -f Dockerfile . --load"

  monitor:
    desc: Monitor the image with snyk
    cmds:
      - "snyk container monitor {{ .TAG_VERSION }}"
    deps:
      - test-deps

  pre-commit:
    desc: Install pre-commit hooks
    cmds:
      - "pre-commit install"
      - "pre-commit install-hooks"
    preconditions:
      - sh: pre-commit --version
        msg: pre-commit is not installed

  prune:
    desc: Prune the builder
    cmds:
      - "docker {{ .BUILDER }} prune --all -f"
    vars:
      BUILDER: builder

  push:
    desc: Push the image to all repositories
    cmds:
      - "{{ .BUILD }} {{ .TAG_LATEST }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .TAG_VERSION }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .QUAY_LATEST }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .QUAY_VERSION }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .GHCR_LATEST }} {{ .PLATFORMS }} -f Dockerfile . --push"
      - "{{ .BUILD }} {{ .GHCR_VERSION }} {{ .PLATFORMS }} -f Dockerfile . --push"

  readme:
    desc: Update the README.md by replacing template with the image name.
    cmds:
      - "sed -i 's/template/{{ .IMAGE_NAME }}/g' README.md"

  run:
    desc: Run the image
    cmds:
      - "{{ .RUN }} {{ .TAG_VERSION }}"

  run-latest:
    desc: Run the latest image
    cmds:
      - "{{ .RUN }} {{ .TAG_LATEST }}"

  shell-exec:
    desc: Get a shell of a running container
    cmds:
      - "{{ .EXEC }} /bin/sh"

  shell-run:
    desc: Get a shell of an image
    cmds:
      - "{{ .RUN }} {{ .TAG_VERSION }} /bin/sh"

  stop:
    desc: Stop a running container
    cmds:
      - "docker stop {{ .CONTAINER }}"

  test:
    desc: Test the image with snyk
    cmds:
      - "snyk container test {{ .TAG_VERSION }} --file=Dockerfile"
    deps:
      - test-deps
  up:
    desc: Run docker-compose up
    cmds:
      - docker-compose -f docker-compose.sqlite.yaml up

  build-deps:
    preconditions:
      - sh: "docker buildx version"
        msg: "buildx is not installed"
    silent: true

  test-deps:
    preconditions:
      - sh: "snyk version"
        msg: "snyk is not installed"
    silient: true

  default:
    cmds:
      - task -l
    silent: true
